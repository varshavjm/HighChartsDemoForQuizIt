(function() {
	this.ComparePage = (function() {
		var plotCharts, renderLineChart, self;

		function ComparePage() {}

		self = ComparePage;

		function createXAxisDataForLineChart(xAxisData, data) {
			var quizFirst = data[0].quiz;
			var quizSecond = data[1].quiz;

			var maxLen = Math.max(quizFirst.length, quizSecond.length);

			//Generate Quiz  X Axis data
			for (var i = 0; i < maxLen; i++) {
				xAxisData.push("Quiz" + (i + 1));
			}
		}

		function getObjectForUser(obj) {
			var objectToReturn = {};
			var quizObject = obj.quiz;
			var dataArray = [];

			for (var i = 0; i < quizObject.length; i++) {
				dataArray.push(quizObject[i].score);
			}
			objectToReturn = {
				"name": obj.name,
				"userID": obj.userID,
				"data": dataArray
			};
			return objectToReturn;
		}

		function generateEasyMediumHardData(quizData) {
			var easyData = [],
				mediumData = [],
				hardData = [];
			for (var i = 0; i < quizData.length; i++) {
				var currentData = quizData[i];
				if (currentData !== undefined) {
					easyData.push(currentData.easy);
					mediumData.push(currentData.medium);
					hardData.push(currentData.hard);
				}
			}
			var matrix = [easyData, mediumData, hardData];
			console.log("Matrix");
			console.log(matrix);
			return matrix;
		}

		function createSeriesData(globalMap, data) {
			var arrayOfUsers = data;
			//Generate global Map - The map is needed for accesing the number of easy, medium and Difficult questions
			//inside the tooltip of line chart
			var object1 = getObjectForUser(arrayOfUsers[0]);
			globalMap[arrayOfUsers[0].userID] = generateEasyMediumHardData(arrayOfUsers[0].quiz);

			var object2 = getObjectForUser(arrayOfUsers[1]);
			globalMap[arrayOfUsers[1].userID] = generateEasyMediumHardData(arrayOfUsers[1].quiz);

			var seriesData = [];
			seriesData.push(object1);
			seriesData.push(object2);
			return seriesData;
		}

		function generatePieChartData(browserData, versionsData) {
			var colors = Highcharts.getOptions().colors,
				categories = ['Arrays', 'Pointer', 'Conditionals', 'Loop'],
				data = [{
					y: 5,
					color: colors[0],
					drilldown: {
						name: 'Arrays',
						categories: ['Easy', 'Medium', 'Difficult'],
						data: [2, 1, 2],
						color: colors[0]
					}
				}, {
					y: 7,
					color: colors[1],
					drilldown: {
						name: 'Pointers',
						categories: ['Easy', 'Medium', 'Difficult'],
						data: [2, 2, 3],
						color: colors[1]
					}
				}, {
					y: 3,
					color: colors[2],
					drilldown: {
						name: 'Conditionals',
						categories: ['Easy', 'Medium', 'Difficult'],
						data: [1, 1, 1],
						color: colors[2]
					}
				}, {
					y: 5,
					color: colors[3],
					drilldown: {
						name: 'Loops',
						categories: ['Easy', 'Medium', 'Difficult'],
						data: [1, 1, 3],
						color: colors[3]
					}
				}],
				i,
				j,
				dataLen = data.length,
				drillDataLen,
				brightness;


			// Build the data arrays
			for (i = 0; i < dataLen; i += 1) {
				// add browser data.  VVIMP Technqiue to create required structure
				browserData.push({
					name: categories[i],
					y: data[i].y,
					color: data[i].color
				});

				// add version data
				drillDataLen = data[i].drilldown.data.length;
				for (j = 0; j < drillDataLen; j++) {
					brightness = 0.1 - (j / drillDataLen) / 2; //Dont change the paramter 2
					versionsData.push({
						name: data[i].drilldown.categories[j],
						y: data[i].drilldown.data[j],
						color: Highcharts.Color(data[i].color).brighten(brightness).get()
					});
				}
			}

		}


		function draw_pie_chart(title) {



			var browserData = [],
				versionsData = [];
			generatePieChartData(browserData, versionsData);
			Highcharts.chart('chart-2', {
				chart: {
					type: 'pie'
				},
				title: {
					text: title
				},
				yAxis: {
					title: {
						text: 'Total percent of question share'
					}
				},
				plotOptions: {
					pie: {
						shadow: false,
						center: ['50%', '50%']
					}
				},
				tooltip: {
					formatter: function() {
						return '<b>' + this.point.name + ':</b> ' + this.y + "/" + this.total;
					}
				},
				series: [{
						name: "Topics",
						data: browserData,
						size: '60%',
						dataLabels: {
							formatter: function() {
								return this.point.name;
							},
							color: '#ffffff',
							distance: -40
						},
					},
					{
						name: 'Number of Questions',
						data: versionsData,
						size: '80%',
						innerSize: '60%',
						dataLabels: {
							formatter: function() {
								return '<b>' + this.point.name + ':</b> ' + this.y;
							}
						}
					}
				]
			});
		}

		function drawLineChart(xAxisData, seriesData, globalMap) {
			Highcharts.chart('chart-1', {

				title: {
					text: 'Quiz-wise comparison between Users'
				},
				xAxis: {
					categories: xAxisData
				},

				yAxis: {
					title: {
						text: 'Score'
					}
				},
				tooltip: {
					useHTML: true,
					formatter: function() {
						var userID = this.point.series.userOptions.userID;
						var index = this.point.index;
						tooltipHtml = this.x + " for <b>" + this.series.name + '</b><br/>Score:' + this.y + "<br/>" + "Easy:" + globalMap[userID][0][index] + "<br/>" + "Medium:" + globalMap[userID][1][index] + "<br/>" + "Hard:" + globalMap[userID][2][index];
						return tooltipHtml;
					}
				},
				legend: {
					layout: 'vertical',
					align: 'right',
					verticalAlign: 'middle'
				},

				plotOptions: {
					series: {
						label: {
							connectorAllowed: false
						},
						cursor: 'pointer',
						events: {
							click: function(event) {
								var quizName = event["point"]["category"];
								draw_pie_chart("Quiz Questions Summary for " + quizName);
							}
						}

					}
				},

				series: seriesData,
				responsive: {
					rules: [{
						condition: {
							maxWidth: 500
						},
						chartOptions: {
							legend: {
								layout: 'horizontal',
								align: 'center',
								verticalAlign: 'bottom'
							}
						}
					}]
				}

			});
		}

		renderLineChart = function(data) {

			var xAxisData = [];
			createXAxisDataForLineChart(xAxisData, data);
			var globalMap = [];
			var seriesData = createSeriesData(globalMap, data);
			drawLineChart(xAxisData, seriesData, globalMap);
		};

		plotCharts = function() {
			return $.ajax({
				url: "/apis/compare/get-data",
				data: {
					other_user_id: $('#chart-1').data('user-id')
				}
			}).done(function(data) {
				return renderLineChart(data);
			});
		};

		ComparePage.prototype.setup = function() {
			if ($('body').hasClass('compare-page')) {
				return plotCharts();
			}
		};

		return ComparePage;

	})();

}).call(this);
